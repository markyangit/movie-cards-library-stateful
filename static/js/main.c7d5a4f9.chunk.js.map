{"version":3,"sources":["components/Header.jsx","components/SearchBar.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/InputText.jsx","components/Textarea.jsx","components/InputNumber.jsx","components/InputSelect.jsx","components/Button.jsx","components/AddMovie.jsx","data.js","components/MovieLibrary.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","SearchBar","this","props","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","data-testid","htmlFor","type","id","value","onChange","checked","defaultProps","Rating","rating","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","map","key","InputText","inputId","labelDescription","Textarea","InputNumber","InputSelect","Button","dataTestId","onClick","innerText","AddMovie","state","genre","sendMovieData","bind","setState","target","bookmarked","MovieLibrary","moviedata","getFilteredMovies","getMovies","data","prevState","filteredBySearchText","filter","toLowerCase","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7d5a4f9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header className=\"movie-card-header\">\r\n        <h1 className=\"page-title\">Movie Cards Library</h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass SearchBar extends React.Component {\r\n  render() {\r\n    const {\r\n      searchText, onSearchTextChange, bookmarkedOnly, onBookmarkedChange,\r\n      selectedGenre, onSelectedGenreChange,\r\n    } = this.props;\r\n    return (\r\n      <form data-testid=\"search-bar-form\">\r\n        <label data-testid=\"text-input-label\" htmlFor=\"input-label\">\r\n          Inclui o texto:\r\n          <input\r\n            type=\"text\"\r\n            id=\"input-label\"\r\n            data-testid=\"text-input\"\r\n            value={ searchText }\r\n            onChange={ onSearchTextChange }\r\n          />\r\n        </label>\r\n        <label\r\n          data-testid=\"checkbox-input-label\"\r\n          htmlFor=\"checkbox-label\"\r\n        >\r\n          Mostrar somente favoritos\r\n          <input\r\n            type=\"checkbox\"\r\n            data-testid=\"checkbox-input\"\r\n            id=\"checkbox-label\"\r\n            checked={ bookmarkedOnly }\r\n            onChange={ onBookmarkedChange }\r\n          />\r\n        </label>\r\n        <label\r\n          htmlFor=\"genre-options\"\r\n          data-testid=\"select-input-label\"\r\n        >\r\n          Filtrar por gênero\r\n          <select\r\n            data-testid=\"select-input\"\r\n            id=\"genre-options\"\r\n            value={ selectedGenre }\r\n            onChange={ onSelectedGenreChange }\r\n          >\r\n            <option data-testid=\"select-option\" value=\"\">Todos</option>\r\n            <option data-testid=\"select-option\" value=\"action\">Ação</option>\r\n            <option data-testid=\"select-option\" value=\"comedy\">Comédia</option>\r\n            <option data-testid=\"select-option\" value=\"thriller\">Suspense</option>\r\n          </select>\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nSearchBar.propTypes = {\r\n  searchText: PropTypes.string,\r\n  onSearchTextChange: PropTypes.func.isRequired,\r\n  bookmarkedOnly: PropTypes.bool,\r\n  onBookmarkedChange: PropTypes.func.isRequired,\r\n  selectedGenre: PropTypes.string,\r\n  onSelectedGenreChange: PropTypes.func.isRequired,\r\n};\r\n\r\nSearchBar.defaultProps = {\r\n  searchText: '',\r\n  bookmarkedOnly: false,\r\n  selectedGenre: '',\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Rating extends React.Component {\r\n  render() {\r\n    const { rating } = this.props;\r\n    return (\r\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\r\n        <span className=\"rating\">{rating}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRating.propTypes = { rating: PropTypes.number };\r\n\r\nRating.defaultProps = {\r\n  rating: 'undefined',\r\n};\r\n\r\nexport default Rating;\r\n","// alteração para subir o primeiro commit\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Rating from './Rating';\r\n\r\nclass MovieCard extends React.Component {\r\n  render() {\r\n    const { movie } = this.props;\r\n    const { title, subtitle, storyline, rating, imagePath } = movie;\r\n    return (\r\n      <div className=\"movie-card\" data-testid=\"movie-card\">\r\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\r\n        <div className=\"movie-card-body\">\r\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\r\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\r\n          <p className=\"movie-card-storyline\">{storyline}</p>\r\n        </div>\r\n        <Rating rating={ rating } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieCard.propTypes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    subtitle: PropTypes.string,\r\n    storyline: PropTypes.string,\r\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    imagePath: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\nexport default MovieCard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport MovieCard from './MovieCard';\r\n\r\nclass MovieList extends React.Component {\r\n  render() {\r\n    const { movies } = this.props;\r\n\r\n    return (\r\n      <div data-testid=\"movie-list\" className=\"movie-list\">\r\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.object,\r\n  ).isRequired,\r\n};\r\n\r\nexport default MovieList;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputText extends React.Component {\n  render() {\n    const {\n      inputId,\n      value,\n      onChange,\n      labelDescription,\n    } = this.props;\n\n    return (\n      <label data-testid={ `${inputId}-label` } htmlFor={ inputId }>\n        { labelDescription }\n        <input\n          type=\"text\"\n          id={ inputId }\n          data-testid={ inputId }\n          value={ value }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nInputText.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  labelDescription: PropTypes.string,\n};\n\nInputText.defaultProps = {\n  labelDescription: '',\n};\n\nexport default InputText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Textarea extends React.Component {\n  render() {\n    const {\n      inputId,\n      value,\n      onChange,\n      labelDescription,\n    } = this.props;\n\n    return (\n      <label data-testid={ `${inputId}-label` } htmlFor={ inputId }>\n        { labelDescription }\n        <textarea\n          id={ inputId }\n          data-testid={ inputId }\n          value={ value }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nTextarea.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  labelDescription: PropTypes.string,\n};\n\nTextarea.defaultProps = {\n  labelDescription: '',\n};\n\nexport default Textarea;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputNumber extends React.Component {\n  render() {\n    const {\n      inputId,\n      value,\n      onChange,\n      labelDescription,\n    } = this.props;\n\n    return (\n      <label data-testid={ `${inputId}-label` } htmlFor={ inputId }>\n        { labelDescription }\n        <input\n          type=\"number\"\n          id={ inputId }\n          data-testid={ inputId }\n          value={ value }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nInputNumber.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  labelDescription: PropTypes.string,\n};\n\nInputNumber.defaultProps = {\n  labelDescription: '',\n  value: '0',\n};\n\nexport default InputNumber;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputSelect extends React.Component {\n  render() {\n    const {\n      inputId,\n      value,\n      onChange,\n      labelDescription,\n    } = this.props;\n\n    return (\n      <label data-testid={ `${inputId}-label` } htmlFor={ inputId }>\n        { labelDescription }\n        <select\n          id={ inputId }\n          data-testid={ inputId }\n          value={ value }\n          onChange={ onChange }\n        >\n          <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nInputSelect.propTypes = {\n  inputId: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  labelDescription: PropTypes.string,\n};\n\nInputSelect.defaultProps = {\n  labelDescription: '',\n};\n\nexport default InputSelect;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends React.Component {\n  render() {\n    const { dataTestId, onClick, innerText } = this.props;\n    return (\n      <button\n        type=\"button\"\n        data-testid={ dataTestId }\n        onClick={ onClick }\n      >\n        { innerText }\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  dataTestId: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  innerText: PropTypes.string,\n};\n\nButton.defaultProps = {\n  innerText: '',\n};\n\nexport default Button;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputText from './InputText';\r\nimport Textarea from './Textarea';\r\nimport InputNumber from './InputNumber';\r\nimport InputSelect from './InputSelect';\r\nimport Button from './Button';\r\n\r\nclass AddMovie extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      subtitle: '',\r\n      title: '',\r\n      imagePath: '',\r\n      storyline: '',\r\n      rating: '0',\r\n      genre: 'action',\r\n    };\r\n\r\n    this.sendMovieData = this.sendMovieData.bind(this);\r\n  }\r\n\r\n  sendMovieData() {\r\n    const { onClick } = this.props;\r\n    onClick(this.state);\r\n    this.setState({\r\n      subtitle: '',\r\n      title: '',\r\n      imagePath: '',\r\n      storyline: '',\r\n      rating: '0',\r\n      genre: 'action',\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { title, subtitle, imagePath, storyline, rating, genre } = this.state;\r\n    return (\r\n      <form data-testid=\"add-movie-form\">\r\n        <InputText\r\n          labelDescription=\"Título\"\r\n          inputId=\"title-input\"\r\n          value={ title }\r\n          onChange={ ({ target }) => this.setState({ title: target.value }) }\r\n        />\r\n        <InputText\r\n          labelDescription=\"Subtítulo\"\r\n          inputId=\"subtitle-input\"\r\n          value={ subtitle }\r\n          onChange={ ({ target }) => this.setState({ subtitle: target.value }) }\r\n        />\r\n        <InputText\r\n          labelDescription=\"Imagem\"\r\n          inputId=\"image-input\"\r\n          value={ imagePath }\r\n          onChange={ ({ target }) => this.setState({ imagePath: target.value }) }\r\n        />\r\n        <Textarea\r\n          labelDescription=\"Sinopse\"\r\n          inputId=\"storyline-input\"\r\n          value={ storyline }\r\n          onChange={ ({ target }) => this.setState({ storyline: target.value }) }\r\n        />\r\n        <InputNumber\r\n          labelDescription=\"Avaliação\"\r\n          inputId=\"rating-input\"\r\n          value={ rating }\r\n          onChange={ ({ target }) => this.setState({ rating: target.value }) }\r\n        />\r\n        <InputSelect\r\n          labelDescription=\"Gênero\"\r\n          inputId=\"genre-input\"\r\n          value={ genre }\r\n          onChange={ ({ target }) => this.setState({ genre: target.value }) }\r\n        />\r\n        <Button\r\n          dataTestId=\"send-button\"\r\n          onClick={ this.sendMovieData }\r\n          innerText=\"Adicionar filme\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddMovie.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddMovie;\r\n","const movies = [\r\n  {\r\n    title: 'Kingsglaive',\r\n    subtitle: 'Final Fantasy XV',\r\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\r\n    rating: 4.5,\r\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\r\n    bookmarked: true,\r\n    genre: 'action',\r\n  },\r\n  {\r\n    title: 'Final Fantasy',\r\n    subtitle: 'Spirits Within',\r\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\r\n    rating: 4.5,\r\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\r\n    bookmarked: false,\r\n    genre: 'fantasy',\r\n  },\r\n  {\r\n    title: 'Ghost In The Shell',\r\n    subtitle: 'Ghost In The Shell',\r\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\r\n    rating: 5,\r\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\r\n    bookmarked: false,\r\n    genre: 'comedy',\r\n  },\r\n  {\r\n    title: 'Appleseed Alpha',\r\n    subtitle: 'Appleseed Alpha',\r\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\r\n    rating: 3.8,\r\n    imagePath: 'images/Appleseed_Alpha.jpg',\r\n    bookmarked: true,\r\n    genre: 'action',\r\n  },\r\n  {\r\n    title: 'Resident Evil',\r\n    subtitle: 'Vendetta',\r\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\r\n    rating: 4.2,\r\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\r\n    bookmarked: true,\r\n    genre: 'fantasy',\r\n  },\r\n];\r\n\r\nexport default movies;\r\n","import React from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport MovieList from './MovieList';\r\nimport AddMovie from './AddMovie';\r\nimport moviedata from '../data';\r\n\r\nclass MovieLibrary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      searchText: '',\r\n      bookmarkedOnly: false,\r\n      selectedGenre: '',\r\n      movies: moviedata,\r\n    };\r\n\r\n    this.getFilteredMovies = this.getFilteredMovies.bind(this);\r\n    this.getMovies = this.getMovies.bind(this);\r\n  }\r\n\r\n  getMovies(data) {\r\n    this.setState((prevState) => ({ movies: [...prevState.movies, data] }));\r\n  }\r\n\r\n  getFilteredMovies() {\r\n    const { searchText, bookmarkedOnly, selectedGenre, movies } = this.state;\r\n    const filteredByBookmarked = movies\r\n      .filter((movie) => (bookmarkedOnly ? movie.bookmarked : movies));\r\n    const filteredBySearchText = filteredByBookmarked\r\n      .filter((movie) => movie.title.toLowerCase().includes(searchText)\r\n      || movie.subtitle.toLowerCase().includes(searchText)\r\n      || movie.storyline.toLowerCase().includes(searchText));\r\n    const filteredByGenre = filteredBySearchText\r\n      .filter((movie) => (selectedGenre === ''\r\n        ? filteredBySearchText : movie.genre === selectedGenre));\r\n    return filteredByGenre;\r\n  }\r\n\r\n  render() {\r\n    const { searchText, bookmarkedOnly, selectedGenre } = this.state;\r\n    return (\r\n      <section>\r\n        <SearchBar\r\n          searchText={ searchText }\r\n          onSearchTextChange={\r\n            ({ target }) => this.setState({ searchText: target.value })\r\n          }\r\n          bookmarkedOnly={ bookmarkedOnly }\r\n          onBookmarkedChange={\r\n            ({ target }) => this.setState({\r\n              bookmarkedOnly: target.type === 'checkbox'\r\n                ? target.checked : target.value })\r\n          }\r\n          selectedGenre={ selectedGenre }\r\n          onSelectedGenreChange={\r\n            ({ target }) => this.setState({ selectedGenre: target.value })\r\n          }\r\n        />\r\n        <AddMovie onClick={ this.getMovies } />\r\n        <MovieList movies={ this.getFilteredMovies() } />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieLibrary;\r\n","import React from 'react';\r\nimport Header from './components/Header';\r\nimport './App.css';\r\nimport MovieLibrary from './components/MovieLibrary';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <MovieLibrary />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}